// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom fetch that logs failures without consuming the original response body.
// We clone the response for any diagnostic reads so the original Response stream
// remains unread for Supabase internals which will parse it later.
const debugFetch: typeof fetch = async (input, init) => {
  try {
    const res = await fetch(input as RequestInfo, init as RequestInit);

    if (!res.ok) {
      try {
        const url = typeof input === 'string' ? input : (input as Request).url;
        const ct = res.headers.get('content-type') || '';

        // Attempt to safely read a preview of the response without affecting the
        // original Response stream. If the Response body has already been used
        // earlier in the request pipeline (e.g. by a service worker or proxy),
        // cloning will fail â€” so guard by checking bodyUsed and catching errors.
        let bodyPreview: string | null = null;
        try {
          if (!res.bodyUsed) {
            const clone = res.clone();
            // Limit preview size to avoid logging huge payloads
            const text = await clone.text();
            bodyPreview = text ? (text.length > 1000 ? text.slice(0, 1000) + '... (truncated)' : text) : null;
          } else {
            // Body already consumed upstream; skip attempting to read
            bodyPreview = null;
          }
        } catch (readErr) {
          // Ignore read errors - logging should not interfere with normal flow
          bodyPreview = null;
        }

        const metadata = {
          url,
          status: res.status,
          statusText: res.statusText,
          type: res.type,
          contentType: ct,
          bodyPreview,
        };

        // If this is a REST v1 404/400, it's likely the table is missing or permissions
        // prevent access. Provide a clearer warn and include the table name when possible.
        try {
          const restMatch = typeof url === 'string' ? url.match(/\/rest\/v1\/([a-zA-Z0-9_]+)/) : null;
          const tableName = restMatch ? restMatch[1] : null;

          if ((res.status === 404 || res.status === 400) && tableName) {
            console.warn(`Supabase REST ${res.status} for table \"${tableName}\": the table may not exist or is unauthorized. URL: ${url}`);
            try {
              console.warn('Supabase request metadata:', JSON.stringify(metadata));
            } catch (e) {
              console.warn('Supabase request metadata (could not stringify)');
            }
          } else {
            // Log structured metadata and a safe stringified version for systems that
            // convert objects to strings (avoids "[object Object]" messages).
            console.error('Supabase request failed', metadata);
            try {
              console.error('Supabase request failed (stringified):', JSON.stringify(metadata));
            } catch (stringifyErr) {
              // Fallback: log the object only
              console.error('Supabase request failed (stringify error):', stringifyErr);
            }
          }
        } catch (e) {
          console.error('Supabase request failed (metadata logging error)', e);
        }
      } catch (e) {
        console.error('Supabase request failed (metadata logging error)', e);
      }
    }

    return res;
  } catch (networkError) {
    console.error('Supabase network error', networkError);
    throw networkError;
  }
};

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY.');
}

export const supabase = createClient<Database>(
  SUPABASE_URL || '',
  SUPABASE_PUBLISHABLE_KEY || '',
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    global: {
      fetch: debugFetch,
    },
  }
);

// Export createClient for re-export compatibility
export { createClient };
