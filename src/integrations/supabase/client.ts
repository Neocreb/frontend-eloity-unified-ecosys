// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom fetch that logs failures without consuming the response body (so Supabase can parse it)
const debugFetch: typeof fetch = async (input, init) => {
  try {
    const res = await fetch(input as RequestInfo, init as RequestInit);
    if (!res.ok) {
      try {
        const url = typeof input === 'string' ? input : (input as Request).url;
        const ct = res.headers.get('content-type') || '';
        // Do NOT read the body here to avoid locking the stream for Supabase internals
        console.error('Supabase request failed', {
          url,
          status: res.status,
          statusText: res.statusText,
          type: res.type,
          contentType: ct,
        });
      } catch (e) {
        console.error('Supabase request failed (metadata logging error)', e);
      }

      // Return a clone so downstream consumers (including the Supabase client internals)
      // can safely read the response body without encountering "body stream already read"
      try {
        return res.clone();
      } catch (cloneErr) {
        // If cloning fails for any reason, fall back to returning the original response
        // (avoid swallowing the original error) so the caller can still handle it.
        console.warn('Failed to clone response, returning original response', cloneErr);
        return res;
      }
    }

    return res;
  } catch (networkError) {
    console.error('Supabase network error', networkError);
    throw networkError;
  }
};

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY.');
}

export const supabase = createClient<Database>(
  SUPABASE_URL || '',
  SUPABASE_PUBLISHABLE_KEY || '',
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    global: {
      fetch: debugFetch,
    },
  }
);

// Export createClient for re-export compatibility
export { createClient };
