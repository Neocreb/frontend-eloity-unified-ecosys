// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom fetch to surface basic error details from Supabase in the console
// When responses are non-OK, read the body as text for logging then return a fresh Response
const debugFetch: typeof fetch = async (input, init) => {
  try {
    const res = await fetch(input as RequestInfo, init as RequestInit);
    if (!res.ok) {
      try {
        const url = typeof input === 'string' ? input : (input as Request).url;
        const ct = res.headers.get('content-type') || '';
        // Read the body as text for logging. Use clone to avoid consuming original stream,
        // then reconstruct a fresh Response so downstream (Supabase SDK) can still parse it.
        const text = await res.clone().text();
        let parsedBody: any = text;
        if (ct.includes('application/json')) {
          try {
            parsedBody = JSON.parse(text);
          } catch (e) {
            // keep raw text
          }
        }

        console.error('Supabase request failed', {
          url,
          status: res.status,
          statusText: res.statusText,
          type: res.type,
          contentType: ct,
          body: parsedBody,
        });

        // Recreate a fresh Response so SDK can continue to read/parse it
        const fresh = new Response(text, {
          status: res.status,
          statusText: res.statusText,
          headers: res.headers,
        });
        return fresh;
      } catch (e) {
        console.error('Supabase request failed (logging error)', e);
        return res;
      }
    }
    return res;
  } catch (networkError) {
    console.error('Supabase network error', networkError);
    throw networkError;
  }
};

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY.');
}

export const supabase = createClient<Database>(
  SUPABASE_URL || '',
  SUPABASE_PUBLISHABLE_KEY || '',
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    global: {
      fetch: debugFetch,
    },
  }
);

// Export createClient for re-export compatibility
export { createClient };
