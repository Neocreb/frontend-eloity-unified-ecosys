// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Custom fetch to surface basic error details from Supabase in the console
// IMPORTANT: Never consume the response body that the SDK needs to read.
const debugFetch: typeof fetch = async (input, init) => {
  try {
    const res = await fetch(input as RequestInfo, init as RequestInit);

    if (!res.ok) {
      const url = typeof input === 'string' ? input : (input as Request).url;
      const ct = res.headers.get('content-type') || '';

      // Best-effort preview without consuming the body: read from a clone if possible
      let preview: string | undefined;
      try {
        const cloned = res.clone();
        // Some responses (opaque) cannot be read; guard in try/catch
        preview = await cloned.text();
      } catch (cloneErr) {
        console.error('Supabase debugFetch: could not clone/read body (non-fatal)', {
          url,
          status: res.status,
          statusText: res.statusText,
          error: cloneErr,
        });
      }

      // If preview looks like JSON, try parsing just for nicer logs
      let bodyForLog: any = preview;
      if (preview && ct.includes('application/json')) {
        try { bodyForLog = JSON.parse(preview); } catch {}
      }

      console.error('Supabase request failed', {
        url,
        status: res.status,
        statusText: res.statusText,
        type: res.type,
        contentType: ct,
        body: bodyForLog,
      });
    }

    // Always return the original response (unconsumed)
    return res;
  } catch (networkError) {
    console.error('Supabase network error', networkError);
    throw networkError;
  }
};

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY.');
}

export const supabase = createClient<Database>(
  SUPABASE_URL || '',
  SUPABASE_PUBLISHABLE_KEY || '',
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    global: {
      fetch: debugFetch,
    },
  }
);

// Export createClient for re-export compatibility
export { createClient };
